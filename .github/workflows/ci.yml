name: Build, Lint, and Test

on:
  push:
  pull_request:
  workflow_dispatch:

# Cancel in-progress runs on the same branch when a new commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy linter
        run: cargo clippy --all-targets -- -D warnings

  verify_python:
    name: Python Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # Pinning to a specific version is good practice

      - name: Install Python dependencies
        run: python -m pip install -r scripts/requirements.txt

      - name: Verify generated vectors are up-to-date
        run: |
          python scripts/make_rust_vectors.py
          git diff --exit-code

      - name: Run Qiskit verification tests
        run: python -m pytest scripts/

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          override: true
      
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build the project
        run: cargo build --all-targets

      - name: Run Rust tests
        run: cargo test --all-targets

      - name: Run documentation tests
        run: cargo test --doc
        
      - name: Run examples
        run: |
          cargo run --example qft
          cargo run --example deutsch_jozsa

  check_no_std:
    name: Check no_std Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install embedded target
      run: rustup target add thumbv7m-none-eabi

    - name: Run cargo check for no_std target
      run: cargo check --target thumbv7m-none-eabi

  vet_dependencies:
    name: Vet Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          override: true

      - name: Install cargo-vet
        run: cargo install cargo-vet --locked

      - name: Check for unaudited dependencies
        run: cargo vet
