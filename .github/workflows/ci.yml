name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    name: Verify (${{ matrix.os }}, ${{ matrix.config.name }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        config:
          - name: Locked
            use_stable: false
            is_locked: true
            cargo_flags: '--locked'
          - name: Unlocked
            use_stable: false
            is_locked: false
            cargo_flags: ''
          - name: Stable Locked
            use_stable: true
            is_locked: true
            cargo_flags: '--locked'
          - name: Stable Unlocked
            use_stable: true
            is_locked: false
            cargo_flags: ''

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: python -m pip install -r scripts/requirements.txt

      - name: Check generated code
        run: |
          python scripts/make_rust_vectors.py
          git diff --exit-code

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.config.use_stable && 'stable' || null }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.config.name }}-${{ hashFiles('**/rust-toolchain.toml', '**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.config.name }}-

      - name: Remove lockfile if testing unlocked
        if: matrix.config.is_locked == false
        shell: bash
        run: rm -f Cargo.lock

      - name: Check formatting
        if: matrix.config.name == 'Pinned' && matrix.os == 'ubuntu-latest'
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets ${{ matrix.config.cargo_flags }} -- -D warnings

      - name: Build
        run: cargo build --all-targets ${{ matrix.config.cargo_flags }}

      - name: Run tests
        run: cargo test --all-targets ${{ matrix.config.cargo_flags }}

      - name: Run doc tests
        run: cargo test --doc ${{ matrix.config.cargo_flags }}

      - name: Build examples
        run: cargo build --examples ${{ matrix.config.cargo_flags }}

      - name: Run cargo vet
        if: matrix.config.name == 'Pinned' && matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-vet --locked
          cargo vet

      - name: Check no_std
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add thumbv7m-none-eabi
